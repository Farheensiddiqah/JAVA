Segment Trees
==============
-->For range of queries
--> it is like full binary tree

eg===
1 2 3 4 5 
1) i=0, j=2 (if given to find range of sum)
2) i=2 to j=5 (again given similar type)
So for that type of queries we use segment trees

WHY DO WE NEED SEGMENT TREES?
=============================
               Query       Update
Approach1 =    O(n)         O(1)

Approach2 =    O(1)         O(n)

Segment TRees  O(logn)     O(logn)


Approach1(Brute Force)
----------
1)Query--O(n)
     i  j   
     i=2 j=5
     for(int k = i to j)
        sum+=arr[k]
2)Update--O(1)
    idx = 2
    arr[idx] = no;

Approach2
----------
1)Query--O(1)
->Using prefix sum approach
     i=2 j=5 
    prefix[j] - prefix[i-1]

2)Update -- -O(n)
   arr[2] = 2
->Here TC is O(n) bcz we have to change again all the 
values which are stored in the prefix sum array


CONCLUSION
===========

So from the above TC table to get more optimised for both 
update and query also to get all done in linear time 
->We use segment trees
-> Here we can perform all the operations 
query and update in O(logn)

COUNT & MEANING OF NODES
===========================
===========================
Some Properties are=
Mid = (start+end)/2
left = (start,mid)
right = (mid+1, end)

No of levels(x) = logN(base 2)
No of nodes (x) = 2^(x+1)-1 ---(but for safety we also take 4*n)


--> By using Divide and conquer technique
           1 2 3 4 5 6 7 8   ---> 1 (2^(0)) nodes
           s     m       e
                /    \
               /      \
              /        \
       1 2 3 4        5 6 7 8   --->2 (2^(1)) nodes
        /  \             /  \
       /    \           /    \
    1 2     3 4       5 6    7 8  --->4 (2^(2)) nodes
    / \     /\        / \    /\
  1    2   3  4      5  6   7  8   ---> 8(2^(3)) nodes



  ====> for the above tree to find sum the segment tree looks like

                       36(0,7)
                     /   \
                    /     \
             10(0,3)        26(4,7)
                /  \        /      \
         (0,,1)3  7(2,3)   11(4,5)  15(6,7)
           /  \    / \      / \       / \
         0     1   2  3     4  5      6  7
        